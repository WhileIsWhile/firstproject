<div id="comments-list">
    {{#commentDTOS}}
        <div class="card m-2" id="comments-{{id}}">
            <div class="card-header">
                {{nickname}}
<!--                모달 트리거 버튼-->
                <button type="button"
                        class="btn btn-sm btn-outline-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#comment-edit-modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-article-id="{{articleId}}">수정</button>
<!--                댓글 삭제 버튼-->
                <button type="button"
                        class="btn btn-sm btn-outline-danger comment-delete-btn"
                        data-comment-id="{{id}}">삭제</button>
            </div>
            <div class="card-body">
                {{body}}
            </div>

        </div>
    {{/commentDTOS}}
</div>

<!-- Modal -->
<div class="modal fade" id="comment-edit-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">댓글 수정</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                        <!--            닉네임 입력-->
                    <div class="mb-3">
                        <label class="form-label">닉네임</label>
                        <input class="form-control form control-sm" id="edit-comment-nickname">
                    </div>
                        <!--            댓글 본문 입력-->
                    <div class="mb-3">
                        <label class="form-label">댓글 내용</label>
                        <textarea class="form-control form-control-sm" rows="3" id="edit-comment-body"></textarea>
                    </div>
                        <!--            히든 인풋-->
                    <input type="hidden" id="edit-comment-id">
                    <input type="hidden" id="edit-comment-article-id">
                        <!--             전송 버튼-->
                    <button type="button" class="btn btn-outline-primary btn-sm" id="comment-update-btn">수정 완료</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!--모달 이벤트 처리-->
<script>
    {
        //모달 요소 선택
        const commentEditModal = document.querySelector("#comment-edit-modal");

        //모달 이벤트 감지
        commentEditModal.addEventListener('show.bs.modal',function (event){
            //트리거 버튼 선택
            const triggerBtn = event.relatedTarget;

            //데이터 가져오기
            const id = triggerBtn.getAttribute("data-bs-id");
            const nickname = triggerBtn.getAttribute("data-bs-nickname");
            const body = triggerBtn.getAttribute("data-bs-body");
            const articleId = triggerBtn.getAttribute("data-bs-article-id");

            //데이터 반영
            document.querySelector("#edit-comment-nickname").value = nickname;
            document.querySelector("#edit-comment-body").value = body;
            document.querySelector("#edit-comment-id").value = id;
            document.querySelector("#edit-comment-article-id").value = articleId;

        });
    }
    {
        // 수정 완료 버튼
       const commentUpdateBtn = document.querySelector("#comment-update-btn");
        // 클릭 이벤트 감지 및 처리
        commentUpdateBtn.addEventListener("click",function (){

            //수정 댓글 개체 생성
            const  comment = {
                id: document.querySelector("#edit-comment-id").value,
                nickname: document.querySelector("#edit-comment-nickname").value,
                body: document.querySelector("#edit-comment-body").value,
                article_id: document.querySelector("#edit-comment-article-id").value

            };
            console.log(comment);
            //수정 Rest API 호출 - fetch()
            const url = "/api/comments/" + comment.id;
            fetch(url,{
                method: "PATCH",    // PATCH 요청
                body: JSON.stringify(comment),  // 수정된 댓글 객체를 JSON 으로 전달
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(response => {
                //http 응답 코드에 딸느 메시지 출력
                const msg = (response.ok) ? "댓글이 수정 되었습니다." : "댓글 수정이 실패..";
                alert(msg);
                //현재 페이지를 새로고침
                window.location.reload();

            });
        });
    }
</script>
<!--댓글 삭제-->
<script>
    {
        // 삭제 버튼 선택 querySelectorAll 여러개 버튼 묶음단위!
       const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");

       // 삭제 버튼 이벤트 처리
        // 여러개 버튼을 반복해야 한다 , 각각을 반복 forEach 버튼 하나씩 꺼내서
        //처리할 거를 작성 , 첫번 쨰 버튼이 btn 이라는 변수에 담겨졌을때 함수를 동작시킴
        commentDeleteBtns.forEach(btn => {
            //(각 버튼 에 이벤트 처리 등록 ) 함수안에 btn 이 왔으면 클릭 이벤트 감지해서 fuction = () 을 동작 시킴
           btn.addEventListener("click", (event) => {
               //이벤트 발생 요소를 선택
               const commentDeleteBtn = event.srcElement;
               //삭제 댓글 id 가져오기
              const commentId = commentDeleteBtn.getAttribute("data-comment-id");
              console.log(`삭제버튼 클릭 : ${commentId} 번 댓글`); // = "삭제버튼 클릭" + commentId + "번 댓글" 이랑 같음

               //삭제 AIP 호출 및 처리
               const url = `/api/comments/${commentId}`; // 백틱은 `` 1번 왼쪾 버튼
               fetch(url, {
                   method:"DELETE"
               }).then(response => {
                   //댓글 삭제 실패 처리
                   if(!response.ok){
                       alert("댓글 삭제 실패...!");
                       return;
                   }
                   // 삭제 성공시 댓글을 화면에서 지움!
                   //window.location.reload();// 페이지 새로고침
                   const target = document.querySelector(`#comments-${commentId}`);
                   target.remove();
               });
           });
        });
    }
</script>